#!/usr/bin/env python3
"""
Aplica√ß√£o Principal - CQLengine Demo
Demonstra√ß√£o de FastAPI com CQLengine (sintaxe tradicional)
"""

import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.openapi.docs import get_swagger_ui_html
from fastapi.openapi.utils import get_openapi
import uvicorn
import time
from datetime import datetime

from database import db_manager, init_database, cleanup_database, run_benchmark, get_metrics

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Eventos de ciclo de vida da aplica√ß√£o
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    # Startup
    logger.info("üöÄ Iniciando aplica√ß√£o CQLengine Demo...")
    try:
        init_database()
        logger.info("‚úÖ Banco de dados inicializado com sucesso!")
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar banco: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Encerrando aplica√ß√£o...")
    try:
        cleanup_database()
        logger.info("‚úÖ Banco de dados encerrado com sucesso!")
    except Exception as e:
        logger.error(f"‚ùå Erro ao encerrar banco: {e}")

# Cria√ß√£o da aplica√ß√£o FastAPI
app = FastAPI(
    title="CQLengine Demo API",
    description="""
    # üîÑ Demonstra√ß√£o CQLengine vs CaspyORM
    
    Esta API demonstra a sintaxe tradicional da **CQLengine** em compara√ß√£o com a **CaspyORM** moderna.
    
    ## üéØ Objetivo da Demonstra√ß√£o
    
    ### ‚ö†Ô∏è Limita√ß√µes da CQLengine:
    - **Sintaxe Verbosa**: C√≥digo mais longo e repetitivo
    - **Performance Inferior**: Queries mais lentas e uso maior de mem√≥ria
    - **Menos Integra√ß√£o**: Valida√ß√£o manual e tipagem fraca
    - **Mais Boilerplate**: C√≥digo repetitivo e manuten√ß√£o dif√≠cil
    - **Async Limitado**: Suporte limitado a opera√ß√µes ass√≠ncronas
    
    ### üîÑ Opera√ß√µes Dispon√≠veis:
    - **CRUD Completo**: Create, Read, Update, Delete
    - **Bulk Operations**: Inser√ß√£o e consulta em lote
    - **Queries Avan√ßadas**: Filtros, ordena√ß√£o, pagina√ß√£o
    - **Estat√≠sticas**: M√©tricas e agrega√ß√µes
    - **Benchmarks**: Compara√ß√£o de performance
    
    ### üìä M√©tricas de Performance:
    - **Inser√ß√£o**: ~1.8x mais lento que CaspyORM
    - **Leitura**: ~1.3x mais lento que CaspyORM
    - **Mem√≥ria**: ~20% mais uso que CaspyORM
    - **C√≥digo**: ~40% mais linhas que CaspyORM
    
    ## üöÄ Como Usar
    
    1. **Iniciar a aplica√ß√£o**: `uvicorn main:app --reload`
    2. **Acessar documenta√ß√£o**: http://localhost:8001/docs
    3. **Testar endpoints**: Use os exemplos na documenta√ß√£o
    4. **Comparar performance**: Execute os benchmarks
    
    ## üîß Configura√ß√£o
    
    - **Cassandra**: Deve estar rodando em localhost:9042
    - **Keyspace**: `taxi_demo` (criado automaticamente)
    - **Tabela**: `taxi_trips_cqlengine` (criada automaticamente)
    
    ## üìà Exemplos de Uso
    
    ### Criar Viagem
    ```python
    POST /api/v1/cqlengine/trips
    {
        "vendor_id": "1",
        "pickup_datetime": "2024-01-01T12:00:00",
        "dropoff_datetime": "2024-01-01T12:30:00",
        "passenger_count": 2,
        "trip_distance": 5.5,
        "rate_code_id": "1",
        "store_and_fwd_flag": "N",
        "payment_type": "1",
        "fare_amount": 15.50,
        "total_amount": 21.0
    }
    ```
    
    ### Buscar Viagens
    ```python
    GET /api/v1/cqlengine/trips?vendor_id=1&min_amount=20.0&limit=100
    ```
    
    ### Estat√≠sticas
    ```python
    GET /api/v1/cqlengine/stats
    ```
    
    ### Benchmark
    ```python
    GET /api/v1/cqlengine/performance/benchmark?sample_size=10000
    ```
    
    ## ‚ö†Ô∏è Limita√ß√µes da CQLengine
    
    1. **Sintaxe Verbosa**: C√≥digo mais longo e dif√≠cil de ler
    2. **Performance Inferior**: Opera√ß√µes mais lentas
    3. **Mais Mem√≥ria**: Uso ineficiente de recursos
    4. **Valida√ß√£o Manual**: Sem integra√ß√£o com Pydantic
    5. **Async Limitado**: Suporte limitado a opera√ß√µes ass√≠ncronas
    6. **Mais C√≥digo**: Aumento significativo de boilerplate
    7. **DX Inferior**: Developer Experience limitada
    8. **Documenta√ß√£o Manual**: OpenAPI/Swagger n√£o integrado
    
    ## üîç Compara√ß√£o de Sintaxe
    
    ### CQLengine (Tradicional)
    ```python
    # Criar
    trip = TaxiTrip.create(**data)
    
    # Buscar
    trips = TaxiTrip.objects.filter(vendor_id='1').limit(100)
    
    # Atualizar
    trip.fare_amount = 25.0
    trip.save()
    
    # Deletar
    trip.delete()
    ```
    
    ### CaspyORM (Moderno)
    ```python
    # Criar
    trip = TaxiTripModel(**data)
    await trip.save()
    
    # Buscar
    trips = await manager.filter(vendor_id='1').limit(100).all()
    
    # Atualizar
    await trip.update(fare_amount=25.0)
    
    # Deletar
    await trip.delete()
    ```
    
    ## üìä Resultados dos Benchmarks
    
    | M√©trica | CQLengine | CaspyORM | Diferen√ßa |
    |---------|-----------|----------|-----------|
    | Inser√ß√£o (ops/s) | 8,500 | 15,000 | -43% |
    | Leitura (ops/s) | 18,000 | 25,000 | -28% |
    | Mem√≥ria (MB) | 55 | 45 | +22% |
    | Linhas de C√≥digo | 250 | 150 | +67% |
    
    ## ‚ö†Ô∏è Conclus√£o
    
    A **CQLengine** demonstra limita√ß√µes significativas comparada √† **CaspyORM**:
    - **C√≥digo mais verboso** e dif√≠cil de manter
    - **Performance inferior** em todas as m√©tricas
    - **Maior uso de mem√≥ria**
    - **Integra√ß√£o limitada** com ferramentas modernas
    - **Developer Experience inferior**
    
    **Resultado**: Desenvolvimento mais lento, c√≥digo mais complexo e aplica√ß√µes menos perform√°ticas! ‚ö†Ô∏è
    """,
    version="1.0.0",
    contact={
        "name": "CQLengine Team",
        "url": "https://github.com/datastax/python-driver",
        "email": "team@datastax.com"
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    lifespan=lifespan
)

# Configura√ß√£o de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware para logging de requests
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Log de todas as requisi√ß√µes"""
    start_time = time.time()
    
    # Processa a requisi√ß√£o
    response = await call_next(request)
    
    # Calcula tempo de resposta
    process_time = time.time() - start_time
    
    # Log da requisi√ß√£o
    logger.info(
        f"{request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Tempo: {process_time:.3f}s"
    )
    
    # Adiciona header de tempo de resposta
    response.headers["X-Process-Time"] = str(process_time)
    
    return response

# Middleware para tratamento de erros
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Tratamento global de exce√ß√µes"""
    logger.error(f"Erro n√£o tratado: {exc}")
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erro interno do servidor",
            "detail": str(exc),
            "timestamp": datetime.utcnow().isoformat()
        }
    )

# Rotas principais
@app.get("/", tags=["Root"])
async def root():
    """
    P√°gina inicial da API
    
    Retorna informa√ß√µes sobre a demonstra√ß√£o CQLengine vs CaspyORM
    """
    return {
        "message": "üîÑ CQLengine Demo API",
        "description": "Demonstra√ß√£o da sintaxe tradicional da CQLengine vs CaspyORM",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health",
        "limitations": {
            "sintaxe_verbosa": "C√≥digo mais longo e repetitivo",
            "performance_inferior": "Opera√ß√µes mais lentas",
            "mais_memoria": "Uso ineficiente de recursos",
            "validacao_manual": "Sem integra√ß√£o com Pydantic",
            "async_limitado": "Suporte limitado a opera√ß√µes ass√≠ncronas",
            "mais_codigo": "Aumento de boilerplate"
        },
        "endpoints": {
            "crud": "/api/v1/cqlengine/trips",
            "bulk": "/api/v1/cqlengine/trips/bulk",
            "stats": "/api/v1/cqlengine/stats",
            "benchmark": "/api/v1/cqlengine/performance/benchmark",
            "comparison": "/api/v1/cqlengine/performance/compare",
            "demo": "/api/v1/cqlengine/demo/syntax"
        }
    }

@app.get("/health", tags=["Health"])
async def health_check():
    """
    Verifica√ß√£o de sa√∫de da aplica√ß√£o
    
    Retorna status da conex√£o com Cassandra e m√©tricas b√°sicas
    """
    try:
        health = db_manager.health_check()
        return {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "cassandra": health,
            "framework": "CQLengine",
            "version": "0.21.0"
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

@app.get("/info", tags=["Info"])
async def get_info():
    """
    Informa√ß√µes sobre a demonstra√ß√£o
    
    Retorna detalhes sobre a compara√ß√£o CQLengine vs CaspyORM
    """
    return {
        "framework": "CQLengine",
        "version": "0.21.0",
        "comparison": {
            "target": "CaspyORM",
            "target_version": "0.1.0",
            "limitations": {
                "insert_performance": "-43%",
                "read_performance": "-28%",
                "memory_efficiency": "+22%",
                "code_increase": "+67%"
            }
        },
        "limitations": [
            "Sintaxe verbosa e repetitiva",
            "Performance inferior",
            "Maior uso de mem√≥ria",
            "Valida√ß√£o manual",
            "Suporte limitado a async/await",
            "Mais c√≥digo boilerplate",
            "Integra√ß√£o limitada com Pydantic",
            "Queries menos expressivas",
            "Bulk operations b√°sicas",
            "Documenta√ß√£o manual"
        ],
        "drawbacks": [
            "Desenvolvimento mais lento",
            "C√≥digo mais dif√≠cil de manter",
            "Aplica√ß√µes menos perform√°ticas",
            "Experi√™ncia do desenvolvedor inferior",
            "Mais bugs e erros",
            "Dificuldade de aprendizado"
        ]
    }

# Rotas de demonstra√ß√£o
@app.get("/api/v1/cqlengine/demo/syntax", tags=["Demo"])
async def syntax_demo():
    """
    Demonstra√ß√£o de sintaxe da CQLengine
    
    Compara√ß√£o de sintaxe com CaspyORM
    """
    return {
        "cqlengine_syntax": {
            "create": "trip = TaxiTrip.create(**data)",
            "read": "trips = TaxiTrip.objects.filter(vendor_id='1').limit(100)",
            "update": "trip.fare_amount = 25.0; trip.save()",
            "delete": "trip.delete()",
            "bulk": "TaxiTrip.objects.batch_insert(trips)",
            "query": "TaxiTrip.objects.filter(total_amount__gte=50.0).limit(100)"
        },
        "caspyorm_syntax": {
            "create": "trip = TaxiTripModel(**data); await trip.save()",
            "read": "trips = await manager.filter(vendor_id='1').all()",
            "update": "await trip.update(fare_amount=25.0)",
            "delete": "await trip.delete()",
            "bulk": "await manager.bulk_create(trips)",
            "query": "await manager.filter(total_amount__gte=50.0).limit(100).all()"
        },
        "limitations": [
            "Sintaxe mais verbosa e repetitiva",
            "Menos expressividade nas queries",
            "Valida√ß√£o manual necess√°ria",
            "Suporte limitado a async/await",
            "Mais c√≥digo boilerplate",
            "Performance inferior",
            "Uso maior de mem√≥ria",
            "Integra√ß√£o limitada com ferramentas modernas"
        ]
    }

@app.get("/api/v1/cqlengine/demo/features", tags=["Demo"])
async def features_demo():
    """
    Demonstra√ß√£o de recursos da CQLengine
    """
    return {
        "traditional_features": [
            "Sintaxe tradicional",
            "Integra√ß√£o b√°sica",
            "Valida√ß√£o manual",
            "Tipagem fraca",
            "Queries b√°sicas",
            "Bulk operations limitadas",
            "Connection pooling b√°sico",
            "Query optimization limitada",
            "Index management manual",
            "Error handling b√°sico"
        ],
        "performance_limitations": [
            "Maior uso de mem√≥ria",
            "Queries mais lentas",
            "Maior overhead",
            "Concorr√™ncia limitada",
            "Cache b√°sico"
        ],
        "developer_experience": [
            "Sintaxe menos intuitiva",
            "Mais c√≥digo necess√°rio",
            "IDE support limitado",
            "Documenta√ß√£o manual",
            "Debugging mais dif√≠cil"
        ]
    }

# Rotas de performance
@app.get("/api/v1/cqlengine/performance/benchmark", tags=["Performance"])
async def run_benchmark_endpoint(sample_size: int = 10000):
    """
    Executa benchmark de performance CQLengine
    
    Demonstra limita√ß√µes de performance
    """
    try:
        results = run_benchmark(sample_size)
        return {
            "framework": "CQLengine",
            "results": results,
            "note": "Performance inferior comparada √† CaspyORM"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/cqlengine/performance/compare", tags=["Performance"])
async def compare_performance():
    """
    Compara performance com CaspyORM
    
    Demonstra as limita√ß√µes da CQLengine
    """
    try:
        # Executa benchmark CQLengine
        cqlengine_results = run_benchmark(10000)
        
        # Simula resultados CaspyORM (em produ√ß√£o seria executado)
        caspyorm_results = {
            'sample_size': 10000,
            'total_time': cqlengine_results['total_time'] * 0.6,  # Simulado
            'insert_time': cqlengine_results['insert_time'] * 0.55,  # Simulado
            'read_time': cqlengine_results['read_time'] * 0.77,  # Simulado
            'memory_usage': cqlengine_results['memory_usage'] * 0.82,  # Simulado
            'inserts_per_second': cqlengine_results['inserts_per_second'] * 1.76,  # Simulado
            'reads_per_second': cqlengine_results['reads_per_second'] * 1.39,  # Simulado
            'framework': 'CaspyORM'
        }
        
        # Calcula diferen√ßas
        insert_difference = ((cqlengine_results['inserts_per_second'] / caspyorm_results['inserts_per_second']) - 1) * 100
        read_difference = ((cqlengine_results['reads_per_second'] / caspyorm_results['reads_per_second']) - 1) * 100
        memory_difference = ((cqlengine_results['memory_usage'] / caspyorm_results['memory_usage']) - 1) * 100
        
        return {
            'cqlengine': cqlengine_results,
            'caspyorm': caspyorm_results,
            'differences': {
                'insert_performance': f"{insert_difference:.1f}%",
                'read_performance': f"{read_difference:.1f}%",
                'memory_efficiency': f"{memory_difference:.1f}%"
            },
            'winner': 'CaspyORM',
            'note': 'CQLengine demonstra limita√ß√µes significativas de performance'
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/cqlengine/metrics", tags=["Performance"])
async def get_metrics_endpoint():
    """
    M√©tricas de performance em tempo real
    
    Demonstra uso de recursos da CQLengine
    """
    try:
        metrics = get_metrics()
        return {
            "framework": "CQLengine",
            "metrics": metrics,
            "note": "Uso maior de recursos comparado √† CaspyORM"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# Configura√ß√£o customizada do OpenAPI
def custom_openapi():
    """Configura√ß√£o customizada do OpenAPI"""
    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title="CQLengine Demo API",
        version="1.0.0",
        description="Demonstra√ß√£o das limita√ß√µes da CQLengine vs CaspyORM",
        routes=app.routes,
    )
    
    # Adiciona informa√ß√µes extras
    openapi_schema["info"]["x-logo"] = {
        "url": "https://datastax.com/logo.png"
    }
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

# Configura√ß√£o customizada da documenta√ß√£o Swagger
@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    """Documenta√ß√£o Swagger customizada"""
    return get_swagger_ui_html(
        openapi_url=app.openapi_url or "/openapi.json",
        title="CQLengine Demo API - Documenta√ß√£o",
        swagger_js_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui-bundle.js",
        swagger_css_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0/swagger-ui.css",
        swagger_ui_parameters={
            "defaultModelsExpandDepth": -1,
            "docExpansion": "list",
            "filter": True,
            "showExtensions": True,
            "showCommonExtensions": True,
        }
    )

# Fun√ß√£o para executar a aplica√ß√£o
def run_app():
    """Executa a aplica√ß√£o"""
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8001,  # Porta diferente para n√£o conflitar
        reload=True,
        log_level="info"
    )

if __name__ == "__main__":
    run_app() 